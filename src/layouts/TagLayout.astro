---
import GetRandomImage from "../components/getRandomImage.astro";
import { getCollection } from "astro:content";
const allContent = await getCollection(Astro.props.directory);
const tags = [...new Set(allContent.map((post) => post.data.tags).flat())];
const imagesByTag = allContent.reduce((acc, post) => {
  post.data.tags.forEach((tag) => {
    if (!acc[tag]) {
      acc[tag] = [];
    }
    if (post.data.image?.src) {
      acc[tag].push(post.data.image.src);
    }
  });
  return acc;
}, {});
const altByTag = allContent.reduce((acc, post) => {
  post.data.tags.forEach((tag) => {
    if (!acc[tag]) {
      acc[tag] = [];
    }
    if (post.data.image?.alt) {
      acc[tag].push(post.data.image.alt);
    }
  });
  return acc;
}, {});
---
<astro>
  {tags.length === 1 ? (
    <div class="object-contain w-full h-full relative flex items-center justify-center font-josefin" >
      <GetRandomImage
        images={JSON.stringify(imagesByTag[tags[0]] || [])}
        alt={JSON.stringify(altByTag[tags[0]] || [])}
        url={`/${Astro.props.directory}/tags/${tags[0]}`}
      />
       <slot />
    </div>
  ) : (
    <div class="sm:grid sm:grid-cols-4 gap-4 space-y-4 sm:space-y-0 justify-center items-center font-josefin" >
      {tags.map((tag) => (
        <div class="col-span-1">
          <GetRandomImage
            images={JSON.stringify(imagesByTag[tag] || [])}
            alt={JSON.stringify(altByTag[tag] || [])}
            url={`/${Astro.props.directory}/tags/${tag}`}
          />
        </div>
      ))}
       <slot />
    </div>
  )}
</astro>