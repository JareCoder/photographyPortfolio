name: Deploy and Publish Docker image
on:
  push:
    branches: main
  pull_request:
    branches: main
  release:
    types: [published]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            dist
            .astro
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build with Bun
        run: bun run build

  deploy-and-publish:
    name: Deploy and Publish
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
      attestations: write

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Restore cached build output
        uses: actions/cache@v4
        with:
          path: |
            dist
            .astro
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "revista-3"
          entrypoint: "https://deno.land/std@0.188.0/http/file_server.ts"
          root: "dist"

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=revista-4
          wranglerVersion: '3.68.0'

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/erfianugrah/revista-4/tags/?page_size=1&ordering=last_updated" | jq -r '.results[0].name')
          if [[ $LATEST_TAG =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Increment the patch version
            PATCH=$((PATCH+1))
            
            # If patch reaches 10, increment minor and reset patch
            if [ $PATCH -eq 10 ]; then
              MINOR=$((MINOR+1))
              PATCH=0
            fi
            
            # If minor reaches 10, increment major and reset minor and patch
            if [ $MINOR -eq 10 ]; then
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
            fi
            
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          else
            # Fallback to 1.7.1 if no valid tag is found
            NEW_TAG="1.7.1"
          fi
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New tag: $NEW_TAG"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64,linux/amd64,linux/arm/v6,linux/arm/v7
          push: true
          tags: |
            erfianugrah/revista-4:${{ steps.get_tag.outputs.NEW_TAG }}
            erfianugrah/revista-4:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
