name: Build, Deploy, and Publish Docker image

on:
  push:
    branches: main
  pull_request:
    branches: main
  release:
    types: [published]

env:
  REGISTRY_IMAGE: erfianugrah/revista-4

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.get_tag.outputs.NEW_TAG }}
    steps:
      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${REGISTRY_IMAGE}/tags/?page_size=1&ordering=last_updated" | jq -r '.results[0].name')
          if [[ $LATEST_TAG =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Increment the patch version
            PATCH=$((PATCH+1))
            
            # If patch reaches 10, increment minor and reset patch
            if [ $PATCH -eq 10 ]; then
              MINOR=$((MINOR+1))
              PATCH=0
            fi
            
            # If minor reaches 10, increment major and reset minor and patch
            if [ $MINOR -eq 10 ]; then
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
            fi
            
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          else
            # Fallback to 1.7.1 if no valid tag is found
            NEW_TAG="1.7.1"
          fi
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New tag: $NEW_TAG"

  bun-build:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build with Bun
        run: bun run build

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 1

  deploy:
    needs: bun-build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "revista-3"
          entrypoint: "https://deno.land/std@0.188.0/http/file_server.ts"
          root: "dist"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=revista-4
          wranglerVersion: '3.68.0'
          packageManager: bun

  docker-build:
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v6
          - linux/arm/v7
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push by digest
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY_IMAGE }}:${{ needs.prepare.outputs.new_tag }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  docker-merge:
    needs: [prepare, docker-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push manifest list
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ needs.prepare.outputs.new_tag }} -t ${{ env.REGISTRY_IMAGE }}:latest \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ needs.prepare.outputs.new_tag }}
